import { Prisma } from "@prisma/client";

import prisma from "../prisma";

type UserIdentifier = "customerId" | "email" | "id";

// Prisma types
export type User = Prisma.PromiseReturnType<typeof getUser>;

/**
 * Create a new User in the database
 * @param customerId Customer's ID generated by Stripe
 * @param email Email address of new User
 * @param signUpType Sign up type
 * @param password Optional hashed password
 */
export const createUser = async (
  customerId: string,
  email: string,
  signUpType: "credentials" | "google",
  password?: string
) => {
  await prisma.user.create({
    data: {
      customerId,
      email,
      password,
      signUpType
    }
  });
};

/**
 * Delete a User from the database
 * @param identifier Identifier query for Prisma lookup
 */
export const deleteUser = async (identifier: {
  [key in UserIdentifier]?: string;
}) => {
  await prisma.user.delete({
    where: identifier
  });
};

/**
 * Get a User from the database
 * @param identifier Identifier query for Prisma lookup
 * @returns User
 */
export const getUser = async (identifier: {
  [key in UserIdentifier]?: string;
}) => {
  return await prisma.user.findUnique({
    where: identifier
  });
};

/**
 * Update a User's data in the database
 * @param identifier Identifier query for Prisma lookup
 * @param data Data object with updated User data
 * @returns User
 */
export const updateUser = async (
  identifier: {
    [key in UserIdentifier]?: string;
  },
  data: object
): Promise<User> => {
  return await prisma.user.update({
    where: identifier,
    data
  });
};
