import Stripe from "stripe";

import { APP_URL } from ".";

// Create Stripe instance with .env secret key
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
  apiVersion: "2020-08-27"
});

export default stripe;

/**
 * Create Stripe Billing Portal for Customer
 * @param {string} customerId Customer's ID generated by Stripe
 * @returns Billing Portal
 */
export const createBillingPortal = async (customerId) => {
  return await stripe.billingPortal.sessions.create({
    customer: customerId,
    return_url: `${APP_URL}/subscriptions`
  });
};

/**
 * Create Stripe Checkout for Customer and Price
 * @param {string} customerId Customer's ID generated by Stripe
 * @param {string} priceId Price ID generate by Stripe
 * @returns Checkout
 */
export const createCheckout = async (customerId, priceId) => {
  return await stripe.checkout.sessions.create({
    success_url: `${APP_URL}`,
    cancel_url: `${APP_URL}/subscriptions`,
    payment_method_types: ["card"],
    line_items: [{ price: priceId, quantity: 1 }],
    mode: "subscription",
    customer: customerId
  });
};

/**
 * Create new Customer in Stripe dashboard for given email if a User does not already exist
 * @param {string} email Email address of potential new User
 * @returns Customer
 */
export const createCustomer = async (email) => {
  const customer = (await stripe.customers.list({ email })).data.shift();
  if (customer) return customer;
  return await stripe.customers.create({ email });
};

/**
 * Create Trial Subscription for Customer with given email
 * Automatically creates Trial Subscription for lowest-priced Product in Stripe Dashboard
 * @param {string} customerId Customer's ID generated by Stripe
 */
export const createTrial = async (customerId) => {
  const subscriptions = await getSubscriptions();
  const trialProduct = subscriptions.reduce(function (a, b) {
    return a.price.unit_amount < b.price.unit_amount ? a : b;
  });
  await stripe.subscriptions.create({
    customer: customerId,
    items: [{ price: trialProduct.price.id }],
    // Change this number for longer/shorter trials
    trial_period_days: 7
  });
};

/**
 * Delete a Stripe Customer
 * @param {string} customerId Customer's ID generated by Stripe
 */
export const deleteCustomer = async (customerId) => {
  await stripe.customers.del(customerId);
};

/**
 * Get Subscription for Customer in Stripe dashboard
 * @param {string} customerId Customer's ID generated by Stripe
 * @returns Subscription
 */
export const getCustomerSubscription = async (customerId) => {
  const subscription = (
    await stripe.subscriptions.list({ customer: customerId })
  ).data.shift();

  const { data: products } = await stripe.products.list();
  const { data: prices } = await stripe.prices.list();

  if (subscription)
    return {
      price: prices.find(
        (price) => price.id === subscription.items.data[0].price.id
      ),
      product: products.find(
        (product) => product.id === subscription.items.data[0].price.product
      ),
      subscription
    };
};

/**
 * Get all Subscriptions from Stripe dashboard
 * @returns Subscriptions
 */
export const getSubscriptions = async () => {
  const subscriptions = [];
  const { data: products } = await stripe.products.list();
  const { data: prices } = await stripe.prices.list();
  for (const price of prices) {
    subscriptions.push({
      price,
      product: products.find((product) => product.id === price.product)
    });
  }
  return subscriptions.sort(
    (a, b) => a.price.unit_amount - b.price.unit_amount
  );
};

/**
 * Update a Customer's associated email
 * @param {string} customerId Customer's ID generated by Stripe
 * @param {string} email New email address
 */
export const updateAccountEmail = async (customerId, email) => {
  await stripe.accounts.update(customerId, { email });
};
